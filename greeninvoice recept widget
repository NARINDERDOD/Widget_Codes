console.log("✅ scriptForReceipt.js loaded");

let idsArrayGlobal = [];
let invoiceListGlobal = [];

ZOHO.embeddedApp.on("PageLoad", function (data) {
    console.log("Zoho Embedded App initialized with data:", data);
    idsArrayGlobal = data.EntityId;

    if (Array.isArray(idsArrayGlobal)) {
        runInvoiceFunction(idsArrayGlobal);
    } else {
        console.error("EntityId is not an array:", idsArrayGlobal);
    }

    ZOHO.CRM.UI.Resize({ width: 100, height: 200 });
});

async function runInvoiceFunction(idsArray) {
    const outputEl = document.getElementById("invoiceOutput");
    let Grand_TotalList = [];
    let invoiceList = [];

    const promises = idsArray.map(id =>
        ZOHO.CRM.API.getRecord({
            Entity: "Invoices",
            approved: "both",
            RecordID: id
        }).then(data => {
            const invoice = data.data[0];
            console.log("✅ invoice:", invoice);

            let invoiceData = {
                id: id,
                subTotal: invoice.Sub_Total,
                grandTotal: parseFloat(invoice.Grand_Total),
                discount: invoice.Discount,
                tax: invoice.Tax,
                date: invoice.Invoice_Date || new Date().toISOString().split('T')[0],
                currency: invoice.Currency || "ILS",
                details: invoice.Account_Name?.name || "",
                Contact_Name: invoice.Contact_Name?.name || "",
                contactId: invoice.Contact_Name?.id || "",
                Bank_name: invoice.createinvoice1__Select_Bank || "",
                Bank_branch: invoice.createinvoice1__Bank_Branch || "",
                Document_Type: invoice.createinvoice1__Document_Type || "",
                //Payment_Types: invoice.createinvoice1__Payment_Types || ""
                                Payment_Types: invoice.createinvoice1__Receipt_Type[0] || ""

            };

            invoiceList.push(invoiceData);
            Grand_TotalList.push(invoiceData.grandTotal);
        })
    );

    console.log("invoiceList", invoiceList);


    await Promise.all(promises);

    invoiceListGlobal = invoiceList;

    const allowedTypes = ["חשבונית מס", "תעודת משלוח", "חשבון עסקה"];
    const documentTypes = [...new Set(invoiceList.map(inv => inv.Document_Type).filter(Boolean))];
    
    if (documentTypes.length !== 1 || !allowedTypes.includes(documentTypes[0])) {
        alert("⚠️ All selected invoices must have the same Document Type, and it must be one of: חשבונית מס, תעודת משלוח, or חשבון עסקה.");
        return; // ❌ Stop if condition not met
    }
    

    const total = Grand_TotalList.reduce((a, b) => a + b, 0);
    const totalEl = document.getElementById("grandTotalAmount");
    if (totalEl) {
        totalEl.value = `₪ ${total.toFixed(2)}`;
    }

    const contactIds = [...new Set(invoiceList.map(inv => inv.contactId))];
    if (contactIds.length !== 1) {
        alert("⚠️ Please select the same contacts. Bank info will not be auto-filled.");
        renderInvoiceSummary(invoiceList);
        resizeToContent();
        return;
    }

    const firstInvoice = invoiceList[0];
    const contactId = contactIds[0];

    const tbody = document.getElementById("receiptSubformBody");
    if (tbody) tbody.innerHTML = "";

    try {
        const contactResp = await ZOHO.CRM.API.getRecord({
            Entity: "Contacts",
            approved: "both",
            RecordID: contactId
        });

        const contact = contactResp.data[0];
        const bankName = contact["createinvoice1__The_Bank_s_Name"] || "";
        const branchNumber = contact["createinvoice1__Branch_Number"] || "";

        addReceiptRow({
            amount: total,
            date: new Date().toISOString().split('T')[0],
            currency: "ILS",
            details: firstInvoice.Bank_name,
            branch: firstInvoice.Bank_branch,
            manual: true,
            paymentType: firstInvoice.Payment_Types || ""
        });

    } catch (err) {
        console.error("❌ Failed to fetch contact info:", err);
    }

    renderInvoiceSummary(invoiceList);
    setTimeout(() => resizeToContent(), 100);
}

function addReceiptRow(data = {}) {


    const tbody = document.getElementById("receiptSubformBody");
    if (!tbody) return;

    const isManual = data.manual === true;
    if (!isManual && (!data.amount || isNaN(data.amount) || Number(data.amount) <= 0)) {
        console.warn("⛔ Skipping auto-added row due to missing/invalid amount");
        return;
    }

    const tr = document.createElement("tr");
    tr.innerHTML = `
        <td>
 <select>
  <option value="">-- Select --</option>
  <option value="ניכוי במקור" ${data.paymentType === "ניכוי במקור" ? "selected" : ""}>ניכוי במקור (Tax deduction)</option>
  <option value="מזומן" ${data.paymentType === "מזומן" ? "selected" : ""}>מזומן (Cash)</option>
  <option value="צ׳ק" ${data.paymentType === "צ׳ק" ? "selected" : ""}>צ׳ק (Cheque)</option>
  <option value="כרטיס אשראי" ${data.paymentType === "כרטיס אשראי" ? "selected" : ""}>כרטיס אשראי (Credit card)</option>
  <option value="העברה בנקאית" ${data.paymentType === "העברה בנקאית" ? "selected" : ""}>העברה בנקאית (Wire-transfer)</option>
  <option value="פייפאל" ${data.paymentType === "פייפאל" ? "selected" : ""}>פייפאל (Paypal)</option>
  <option value="אפליקציית תשלום" ${data.paymentType === "אפליקציית תשלום" ? "selected" : ""}>אפליקציית תשלום (Payment app)</option>
  <option value="אחר" ${data.paymentType === "אחר" ? "selected" : ""}>אחר (Other)</option>
</select>



        </td>
        <td><input type="date" value="${data.date}" /></td>
        <td><input type="number" class="amount-field" value="${data.amount}" oninput="updateTotal()" placeholder="₪ Amount" /></td>
        <td>
        <select>
  <option value="ILS" ${data.currency === 'ILS' ? 'selected' : ''}>₪ ILS</option>
  <option value="USD" ${data.currency === 'USD' ? 'selected' : ''}>$ USD</option>
  <option value="EUR" ${data.currency === 'EUR' ? 'selected' : ''}>€ EUR</option>
  <option value="GBP" ${data.currency === 'GBP' ? 'selected' : ''}>£ GBP</option>
  <option value="JPY" ${data.currency === 'JPY' ? 'selected' : ''}>¥ JPY</option>
  <option value="CHF" ${data.currency === 'CHF' ? 'selected' : ''}>CHF</option>
  <option value="CNY" ${data.currency === 'CNY' ? 'selected' : ''}>¥ CNY</option>
  <option value="AUD" ${data.currency === 'AUD' ? 'selected' : ''}>A$ AUD</option>
  <option value="CAD" ${data.currency === 'CAD' ? 'selected' : ''}>C$ CAD</option>
  <option value="RUB" ${data.currency === 'RUB' ? 'selected' : ''}>₽ RUB</option>
  <option value="BRL" ${data.currency === 'BRL' ? 'selected' : ''}>R$ BRL</option>
  <option value="HKD" ${data.currency === 'HKD' ? 'selected' : ''}>HK$ HKD</option>
  <option value="SGD" ${data.currency === 'SGD' ? 'selected' : ''}>S$ SGD</option>
  <option value="THB" ${data.currency === 'THB' ? 'selected' : ''}>฿ THB</option>
  <option value="MXN" ${data.currency === 'MXN' ? 'selected' : ''}>Mex$ MXN</option>
  <option value="TRY" ${data.currency === 'TRY' ? 'selected' : ''}>₺ TRY</option>
  <option value="NZD" ${data.currency === 'NZD' ? 'selected' : ''}>NZ$ NZD</option>
  <option value="SEK" ${data.currency === 'SEK' ? 'selected' : ''}>kr SEK</option>
  <option value="NOK" ${data.currency === 'NOK' ? 'selected' : ''}>kr NOK</option>
  <option value="DKK" ${data.currency === 'DKK' ? 'selected' : ''}>kr DKK</option>
  <option value="KRW" ${data.currency === 'KRW' ? 'selected' : ''}>₩ KRW</option>
  <option value="INR" ${data.currency === 'INR' ? 'selected' : ''}>₹ INR</option>
  <option value="IDR" ${data.currency === 'IDR' ? 'selected' : ''}>Rp IDR</option>
  <option value="PLN" ${data.currency === 'PLN' ? 'selected' : ''}>zł PLN</option>
  <option value="RON" ${data.currency === 'RON' ? 'selected' : ''}>lei RON</option>
  <option value="ZAR" ${data.currency === 'ZAR' ? 'selected' : ''}>R ZAR</option>
  <option value="HRK" ${data.currency === 'HRK' ? 'selected' : ''}>kn HRK</option>
</select>

        </td>
        <td><input type="text" placeholder="Bank (customer)" value="${data.details || ''}" /></td>
        <td><input type="text" placeholder="Branch (customer)" value="${data.branch || ''}" /></td>
         <td><input type="text" placeholder="Account (customer)" value="${data.branch || ''}" /></td>

        <td><button onclick="this.closest('tr').remove(); updateTotal();" title="Remove row">❌</button></td>
    `;

    tbody.appendChild(tr);
    updateTotal();
}

function updateTotal() {
    const amountInputs = document.querySelectorAll("#receiptSubformBody input[type='number']");
    let sum = 0;

    amountInputs.forEach(input => {
        const value = parseFloat(input.value);
        if (!isNaN(value)) sum += value;
    });

    const totalPaidEl = document.getElementById("totalPaid");
    if (totalPaidEl) totalPaidEl.textContent = `₪${sum.toFixed(2)}`;

    const grandTotalInput = document.getElementById("grandTotalAmount");
    if (grandTotalInput) grandTotalInput.value = `₪ ${sum.toFixed(2)}`;
}

function renderInvoiceSummary(invoiceList) {
    const summaryEl = document.getElementById("invoiceSummary");
    summaryEl.innerHTML = "";

    let totalTax = 0, totalDiscount = 0, totalGrand = 0;
    invoiceList.forEach(inv => {
        totalTax += parseFloat(inv.tax || 0);
        totalDiscount += parseFloat(inv.discount || 0);
        totalGrand += parseFloat(inv.grandTotal || 0);
    });

    let html = `
      <div><strong>Selected Invoices Summary (${invoiceList.length} record${invoiceList.length > 1 ? "s" : ""})</strong></div>
      <ul style="padding: 0; list-style: none;">
    `;

    if (totalTax > 0) html += `<li><strong>Tax:</strong> ₪ ${totalTax.toFixed(2)}</li>`;
    if (totalDiscount > 0) html += `<li><strong>Discount:</strong> ₪ ${totalDiscount.toFixed(2)}</li>`;
    html += `<li><strong>Combined Grand Total:</strong> ₪ ${totalGrand.toFixed(2)}</li></ul>`;

    summaryEl.innerHTML = html;
}

function createReceipt() {
    if (hasReceiptBeenCreated) return;

    const outputEl = document.getElementById("invoiceOutput");
    const totalInput = document.getElementById("grandTotalAmount");
    const createBtn = document.getElementById("createReceiptBtn");
    const addReceipt = document.getElementById("addReceipt");

    createBtn.disabled = true;
    createBtn.textContent = "Creating...";
    hasReceiptBeenCreated = true;

    const totalValue = parseFloat(totalInput.value.replace(/[₪,]/g, '').trim());
    if (isNaN(totalValue)) {
        alert("Please enter a valid amount");
        createBtn.disabled = false;
        createBtn.textContent = "Create receipt";
        hasReceiptBeenCreated = false;
        return;
    }

    // 🔁 Extract receipt row data
    const receiptRows = [];
    const rows = document.querySelectorAll("#receiptSubformBody tr");

    rows.forEach(row => {
        const paymentType = row.querySelector("td:nth-child(1) select")?.value || "";
        const date = row.querySelector("td:nth-child(2) input")?.value || "";
        const amount = parseFloat(row.querySelector("td:nth-child(3) input")?.value || 0);
        const currency = row.querySelector("td:nth-child(4) select")?.value || "";
        const details = row.querySelector("td:nth-child(5) input")?.value || "";
        const branch = row.querySelector("td:nth-child(6) input")?.value || "";

       if (!isNaN(amount) && amount > 0) {
        receiptRows.push({
            date: date,
            type: mapPaymentTypeToGreenInvoice(paymentType), // 👈 Map name to GreenInvoice type number
            price: amount,
            currency: currency,
                details:details,
                branch:branch
            });
        }
    });

    const req_data = {
        arguments: JSON.stringify({
            widgetData: {
                ids: idsArrayGlobal,
                custom_total: totalValue,
                payment: receiptRows
            }
        })
    };

    console.log("📤 Calling tax_invoice1 with:", req_data);

    ZOHO.CRM.FUNCTIONS.execute("tax_invoice1", req_data)
    .then(function (data) {
        console.log("✅ Function response:", data);
    
        let details;
        try {
            const rawOutput = typeof data.details === "string" ? data.details : data.details.output;
            details = typeof rawOutput === "string" ? JSON.parse(rawOutput) : rawOutput;
        } catch (e) {
            console.error("❌ Failed to parse details JSON:", data.details);
            details = {};
        }
    
        if (details.errorCode) {
            console.error("🚫 GreenInvoice Error:", details.errorMessage || "Unknown error");
    
            alert("❌ Error from GreenInvoice:\n" + (details.errorMessage || "An unknown error occurred."));
    
            createBtn.disabled = false;
            createBtn.textContent = "Create receipt";
            hasReceiptBeenCreated = false;
    
            return; // ⛔ prevent further execution
        }
    
         details = data.details;
         if (details.id) {
            
            addReceipt.disabled = true ;
                console.log("✅ id response:", details.id);

                outputEl.textContent = JSON.stringify("😃 Receipt Created Successfully", null, 2);


                 // 🔽 Hide all ❌ remove buttons
    document.querySelectorAll("#receiptSubformBody button[title='Remove row']").forEach(btn => {
        btn.style.display = "none";
    });

            }
            

            const downloadUrl = extractDocumentURL(details);

            if (downloadUrl) {
                const container = document.getElementById("pdfDownloadContainer");
                container.innerHTML = "";

                const link = document.createElement("a");
                link.href = downloadUrl;
                link.textContent = "📄 Download PDF";
                link.target = "_blank";

                Object.assign(link.style, {
                    display: "inline-block",
                    marginTop: "10px",
                    padding: "10px 16px",
                    backgroundColor: "#00b27f",
                    color: "white",
                    borderRadius: "8px",
                    fontWeight: "bold",
                    textDecoration: "none",
                    boxShadow: "0 4px 6px rgba(0,0,0,0.1)"
                });

                container.appendChild(link);
            }

            let createdRecordId = null;
            if (Array.isArray(details.userMessage)) {
                const createdRespLine = details.userMessage.find(line => line && line.startsWith("createdRecordResp"));

                if (createdRespLine) {
                    try {
                        const jsonPart = createdRespLine.replace("createdRecordResp ", "").trim();
                        const recordData = JSON.parse(jsonPart);
                        if (recordData.id) {
                            createdRecordId = recordData.id;
                        }
                    } catch (err) {
                        console.warn("❌ Could not parse createdRecordResp:", err);
                    }
                }
            }

            if (createdRecordId) {
                const container = document.getElementById("pdfDownloadContainer");

                const viewBtn = document.createElement("a");
                viewBtn.href = `https://crm.zoho.com/crm/org872394793/tab/Invoices/${createdRecordId}`;
                viewBtn.target = "_blank";
                viewBtn.textContent = "👁️ View Created Record";

                Object.assign(viewBtn.style, {
                    display: "inline-block",
                    marginTop: "10px",
                    marginLeft: "10px",
                    padding: "10px 16px",
                    backgroundColor: "#007bff",
                    color: "white",
                    borderRadius: "8px",
                    fontWeight: "bold",
                    textDecoration: "none",
                    boxShadow: "0 4px 6px rgba(0,0,0,0.1)"
                });

                container.appendChild(viewBtn);
            }
           
            resizeToContent();
            createBtn.textContent = "Receipt Created ✅";
        })
        .catch(function (error) {
            console.error("❌ Function error:", error);
            outputEl.textContent = "Error executing function: " + error.message;
            createBtn.disabled = false;
            createBtn.textContent = "Create receipt";
            hasReceiptBeenCreated = false;
        });
}


function extractDocumentURL(responseData) {
    try {
        const docLine = (responseData.userMessage || []).find(line => line?.startsWith("Create Document Response:"));
        if (!docLine) return null;
        const jsonPart = docLine.replace("Create Document Response: ", "").trim();
        const docData = JSON.parse(jsonPart);
        return docData?.url?.origin || null;
    } catch (err) {
        console.error("❌ Failed to extract doc URL:", err);
        return null;
    }
}

function resizeToContent() {
    const contentHeight = Math.max(
        document.body.scrollHeight,
        document.documentElement.scrollHeight
    );
    ZOHO.CRM.UI.Resize({ height: contentHeight + 20, width: 900 });
}


function mapPaymentTypeToGreenInvoice(typeLabel) {
    const cleanedLabel = typeLabel.replace(/\s*\(.*?\)/, "").trim(); // remove everything from the first "("
    const map = {
        "ניכוי במקור": 0,
        "מזומן": 1,
        "צ׳ק": 2,
        "כרטיס אשראי": 3,
        "העברה בנקאית": 4,
        "פייפאל": 5,
        "אפליקציית תשלום": 6,
        "אחר": 7
    };
    return map[cleanedLabel] || 0; // Default to "Other"
}


let hasReceiptBeenCreated = false;
ZOHO.embeddedApp.init();
